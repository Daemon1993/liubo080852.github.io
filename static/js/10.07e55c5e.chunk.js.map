{"version":3,"sources":["features/task_manage/type_manage/typemanage.scss","features/task_manage/type_manage/TypeManage.js","data_model/ServerNetWorkUtils.js"],"names":["module","exports","TypeManage","props","getTypesData","ServerNetWorkUtils","then","res","console","log","setState","types","dispatch","actionTypeDirs","catch","error","dir_inputChange","evt","dir_name","target","value","handleOk","state","addTypeDir","objectId","add_dialog_show","handleCancel","add_type","this","className","styles","main","onClick","shape","length","DataShow","datas","title","visible","onOk","onCancel","size","placeholder","onChange","React","Component","content","gutter","map","data","name","TypeManageConnect","connect","TB_Types","reset_k1","CryptoJS","enc","Base64","parse","toString","Utf8","substring","Bmob","initialize","requestBody","Promise","resolve","reject","types_sql","Query","set","type_id","tags","save","find"],"mappings":"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","file":"static/js/10.07e55c5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"src-features-task_manage-type_manage-typemanage__main--1lxQP\",\"add_type\":\"src-features-task_manage-type_manage-typemanage__add_type--ImcSm\",\"content\":\"src-features-task_manage-type_manage-typemanage__content--3EK0b\"};","import ServerNetWorkUtils from \"@/data_model/ServerNetWorkUtils\";\r\nimport React from \"react\";\r\nimport { Button, Card, Col, Empty, Input, List, Modal, Row } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport styles from './typemanage.scss';\r\nimport { connect } from \"react-redux\";\r\nimport { actionTypeDirs } from \"../login/login_reducer\";\r\n\r\nclass TypeManage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            types: [],\r\n            add_dialog_show: false,\r\n            dir_name: ''\r\n        }\r\n    }\r\n\r\n    getTypesData = () => {\r\n        ServerNetWorkUtils.getTypesData().then(res => {\r\n            console.log(res)\r\n            this.setState({\r\n                types: res\r\n            })\r\n            this.props.dispatch(actionTypeDirs(res))\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        console.log(\"-----TypeManage-componentDidMount-----\")\r\n        this.getTypesData()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={styles.main}>\r\n                <div className={styles.add_type}>\r\n                    <Button onClick={this.add_type} shape=\"round\">添加目录</Button>\r\n                    <Button shape=\"round\">编辑目录</Button>\r\n                </div>\r\n                {this.state.types.length > 0 ?\r\n                    <DataShow datas={this.state.types} />\r\n                    : <Empty />}\r\n\r\n                <Modal title=\"添加目录-输入目录名\" visible={this.state.add_dialog_show}\r\n                    onOk={this.handleOk}\r\n                    onCancel={this.handleCancel}>\r\n\r\n                    <Input size=\"large\" placeholder=\"目录名\" value={this.state.dir_name} onChange={this.dir_inputChange} />\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    dir_inputChange = (evt) => {\r\n        this.setState({\r\n            dir_name: evt.target.value\r\n        }\r\n        )\r\n    }\r\n\r\n    handleOk = () => {\r\n\r\n        console.log(\"dir_name \" + this.state.dir_name)\r\n        //开始上传\r\n        ServerNetWorkUtils.addTypeDir(this.state.dir_name)\r\n            .then(res => {\r\n                console.log(res)\r\n                if (res.objectId) {\r\n                    this.getTypesData()\r\n                }\r\n            });\r\n\r\n        this.setState({\r\n            add_dialog_show: false\r\n        })\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            add_dialog_show: false\r\n        })\r\n    };\r\n    add_type = () => {\r\n        this.setState({\r\n            add_dialog_show: true\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction DataShow(props) {\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <Row gutter={16}>\r\n                {\r\n                    props.datas.map(data => {\r\n                        return (\r\n                            <Col key={data.objectId}>\r\n                                \r\n                                <Button>{data.name}</Button>\r\n                            </Col>\r\n                        )\r\n                    })\r\n                }\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TypeManageConnect= connect()(TypeManage)\r\nexport default TypeManageConnect\r\n","import Bmob from \"hydrogen-js-sdk\";\r\n\r\nimport CryptoJS from \"crypto-js\";\r\nconst TB_Types = 'Types'\r\nconst TB_Article = 'Article'\r\n\r\nexport default class ServerNetWorkUtils {\r\n\r\n    static initBmob() {\r\n        console.log(\"---initBmob\")\r\n        let reset_k = \"NDUxOTkzMTkzNw==\";\r\n        let reset_k1 = CryptoJS.enc.Base64.parse(reset_k).toString(CryptoJS.enc.Utf8);\r\n        reset_k1 = reset_k1.substring(2, reset_k1.length - 2)\r\n        Bmob.initialize(\"c5bfe65ab37d31cd\", reset_k1);\r\n    }\r\n\r\n    static pushArticle(requestBody){\r\n        return new Promise((resolve, reject) => {\r\n            const types_sql = Bmob.Query(TB_Article);\r\n            types_sql.set(\"title\",requestBody.title)\r\n            types_sql.set(\"content\",requestBody.content)\r\n            types_sql.set(\"type_id\",requestBody.type_id)\r\n            types_sql.set(\"tags\",requestBody.tags)\r\n            types_sql.save().then(res => {\r\n                resolve(res)\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 添加类型目录\r\n     * @param {*} name \r\n     * @returns \r\n     */\r\n    static addTypeDir(name) {\r\n        return new Promise((resolve, reject) => {\r\n            const types_sql = Bmob.Query(TB_Types);\r\n            types_sql.set(\"name\",name)\r\n            types_sql.save().then(res => {\r\n                resolve(res)\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 获取所有目录类型数据\r\n     * @returns \r\n     */\r\n    static getTypesData() {\r\n        return new Promise((resolve, reject) => {\r\n            const types_sql = Bmob.Query(TB_Types);\r\n            types_sql.find().then(res => {\r\n                resolve(res)\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n}"],"sourceRoot":""}